
aimodel_t model;

// Layer definition
uint16_t input_layer_shape[] = {1, 9};
ailayer_input_f32_t   input_layer    = AILAYER_INPUT_F32_A(2, input_layer_shape);
ailayer_dense_f32_t   dense_layer_1  = AILAYER_DENSE_F32_A(30);
ailayer_relu_f32_t    relu_layer_1   = AILAYER_RELU_F32_A();
ailayer_dense_f32_t   dense_layer_2  = AILAYER_DENSE_F32_A(20);
ailayer_relu_f32_t    relu_layer_2   = AILAYER_RELU_F32_A();
ailayer_dense_f32_t   dense_layer_3  = AILAYER_DENSE_F32_A(9);
ailayer_softmax_f32_t softmax_layer  = AILAYER_SOFTMAX_F32_A();

// Model parameters (Weights and Biases)
const uint32_t parameter_memory_size = 4436;
const uint32_t model_parameters[ 1109 ] PROGMEM = {
    0xBD8415D9, 0xBF4366E6, 0x3D1ED833, 0xBE9EE424, 0x3DCC4CEF, 0x3DE4A663, 0x400C3326, 0x3EA53819,
    0xBFFA55D7, 0x3EC37D35, 0x3FD5DAEB, 0x3E8CB52C, 0xBD9B881B, 0x402357E8, 0xBD76A402, 0xBF58BCBB,
    0xBE17CDB7, 0x3EC73597, 0xBE257077, 0xC00663E1, 0x3EC4C49B, 0x3EAEC666, 0xBFE77642, 0x3DC95C21,
    0xC027E803, 0x3F58F79B, 0xBEAF815A, 0x3F3090F3, 0x3FA50997, 0xBEDD6C01, 0xBFCA5AEE, 0xBE5A0BCA,
    0xBDAC45CE, 0xC031C0B6, 0x40122652, 0x3B34686D, 0x3DEAC350, 0x3E2C8183, 0xBF23A718, 0x3EEC395A,
    0xBED75DFE, 0xBE985D26, 0x3DA8ADA6, 0xBAAFC71C, 0x3E1415D1, 0xBE2CFBAA, 0x3C8CD8FF, 0xBEF14B49,
    0xBE35EAD1, 0x3F4F7F46, 0x3E491D19, 0x40216EE3, 0xBF27F5E3, 0x3FE39A55, 0xBE85F93E, 0x3E253BAA,
    0x3DA6BC36, 0xBF938153, 0xBF0007F7, 0x3E6D714B, 0xBC2A93AB, 0xBF8BAA8D, 0x401EECA8, 0xBDDF5CE9,
    0xBE26C2A9, 0xBDB4C376, 0x3ECAD975, 0x3F84C8B9, 0x3E851732, 0x3F0D6156, 0x3E89D457, 0xBF8240BE,
    0x3FDAAC79, 0x3E3F2828, 0x3F4D94CC, 0x3F85416B, 0xC04B29FD, 0x3E1007CE, 0xBE86B4DE, 0x3EB5E0A2,
    0x3EA03B21, 0x3E71EB21, 0x3F1A5670, 0xBEEA2AF7, 0x3EC14CE8, 0x3F54BFE7, 0xBE5C84D5, 0xBF84E20B,
    0xBDF272A5, 0xBE7DB779, 0xBD687D0B, 0xBEEB67FF, 0x3E02BDF2, 0x3CFFC2D2, 0xBED872DF, 0xBF1E4332,
    0x3EB72742, 0xBF01AA79, 0x3DA8AFD9, 0x3F1EF6ED, 0xBC2326A4, 0x3F168522, 0xBEC04553, 0xBCBF9B37,
    0xBE549680, 0xBDF25C45, 0x3E3983D9, 0xBE98393B, 0x3E23A842, 0xBF22CA11, 0x3E87DEAE, 0xBE89DF0C,
    0x3DB952BD, 0x3F038B9A, 0x3E5ABCB5, 0x3F0F3B6B, 0xBF8FB345, 0xBE736AA1, 0xBE8B80C4, 0x3FC1ADAB,
    0xBF6165A5, 0xBF9CC1D7, 0xBE30D821, 0x3EFFBEA3, 0x3E5BD444, 0xBEAFBF9B, 0xBF56DACD, 0x3F5B0A22,
    0x3F1FDDB5, 0x3F04ABD9, 0x3D111185, 0xBD572B4C, 0xBDD47DD1, 0x3F1FED15, 0xBF313350, 0xBF3FC2C9,
    0x3E2C0341, 0xBE38C6B7, 0x406799C1, 0x3E9D0DF5, 0xC042F4AF, 0x3D97622B, 0x3D72FD7C, 0xBE9C43D8,
    0xBE0E036E, 0xBEA0FDDA, 0xBF8869AA, 0xBE445685, 0xBDF15D5C, 0xBEE9F603, 0xBDC793DB, 0xBEC9C934,
    0x3F103925, 0xBC5CB4E0, 0x3DD3AA1D, 0x3F053095, 0x3E3787BF, 0x3E332EC4, 0x3DA09F39, 0x3EEFD83B,
    0xBDA5EBEC, 0x3E411D7B, 0xBE867978, 0x3D66E2FC, 0x3F89856C, 0xBE5036DB, 0x3DD85DB1, 0xBF1A4E1C,
    0x3C584F63, 0xBD9364AB, 0xBE308898, 0xBEA6D718, 0x3E1AD21D, 0x3EDD53E0, 0x3E35C60D, 0xBB4D4C50,
    0x3EE10414, 0x3F695548, 0xBEB15463, 0x3EA14C7D, 0xBE9343FB, 0xBEF25738, 0x3DC4AFA8, 0x3EB54AB1,
    0xBCECFA5D, 0xBE899B30, 0xBE3E49DE, 0xBF84CE18, 0x3EB5EFDC, 0x3F58DEAA, 0xBF1751D7, 0xBEAEBFFF,
    0x3D394DA3, 0x3E973E90, 0xBE8A67F5, 0xBCB90C8A, 0x3D78A373, 0xBF012E41, 0x3EECD07C, 0x3F2539D5,
    0x3DFDFF14, 0x3E64B5FE, 0xBECDB102, 0xBF14F7A3, 0xBE97EC34, 0x3F56BEEF, 0xBE0A1D2E, 0xBCB1964A,
    0x3E4258D5, 0x3E9949A6, 0x3F1DBF4A, 0x3D2EA251, 0x3D434FD3, 0xBE41D50E, 0xBD61B744, 0xBE04FAF5,
    0x3D78243D, 0xB93F8A3C, 0xBF0FCDCD, 0x3F3033D7, 0xBE82C11B, 0xBF03294E, 0x3F8CEC45, 0x3E9114F2,
    0xBE3B6D5E, 0xBF8665E5, 0x3ECE1D3B, 0xBE9582A8, 0x3DAB6560, 0xBCD31847, 0xBD850FF8, 0x3D9025FD,
    0xBCBCC79A, 0x3EAC1543, 0x3F61AC27, 0x3E10907A, 0x3E3BDB2B, 0xBE4CE708, 0xBDD58C2C, 0xBC9C6EFE,
    0xBE9A3D14, 0xBF08790B, 0xBF3CE23B, 0xBE989A2D, 0x3EB81187, 0x3F739F34, 0x3E1523CC, 0x3E3D0A4E,
    0xBDEB662A, 0x3EC2632D, 0x3D6852EC, 0xBF1271CB, 0xBD6E2711, 0xBF4E6EED, 0x3F58E95A, 0xBE17C11C,
    0xBDBCDD79, 0x3F9D4E84, 0x3E6F7E18, 0x3D9DAB7B, 0xBF24F1B4, 0xBFA236E4, 0x3E373E11, 0xBCDBC44B,
    0xBE70DF73, 0x3E773677, 0xBF337EF8, 0x3EB2DABC, 0x3DE8D0B2, 0xBEC1EF43, 0xBD0A5779, 0x3C0F55F9,
    0xB965B77C, 0xBCE461B9, 0x3DE8D823, 0x3D7A1AF7, 0x3E7AF71A, 0xBB951FB8, 0x3ECBE3F6, 0x3EBFD483,
    0x3F8F8068, 0x3EBE220F, 0xBE27C2A6, 0xBDF5F562, 0xBF992277, 0xBDB1142E, 0xBE24EF7F, 0x3D509C04,
    0x3E0C7717, 0x3EFD6B1A, 0xBD8FE7A0, 0x3CCDB3E2, 0x3F111625, 0xBD86E6FD, 0x3F3603D2, 0xBDBFA298,
    0x3B44DC25, 0xBAA3DA29, 0x3F67A75A, 0xBF03FE93, 0xBEA9CDB3, 0xBF4E98DF, 0x3F0F0C55, 0xBEA9C4D0,
    0x3DC77F6E, 0xBF0D9D21, 0x3CCB9234, 0xBE96BE64, 0x3FD66773, 0xBF563058, 0x3E9AAA8F, 0x3EA19C10,
    0x3EE6A801, 0xBE6479AF, 0x3F5007AD, 0x3EC4A2E4, 0x3EE444D0, 0x3F579F69, 0xBF3812F9, 0x3E7C2D27,
    0x3F0242D9, 0xBDF46055, 0x3EEFB03F, 0xBFA53A78, 0xBCD901BD, 0x3E5A7F7F, 0x3F257897, 0x3B6422A3,
    0xBD960C4F, 0x3C8A9458, 0x3E106C8F, 0x3F7DD619, 0x3E2AE1CC, 0x3DAD6648, 0xBD47FB16, 0xBE2CBE6A,
    0x3DFCE401, 0x3EB5ADCC, 0x3F0F8E56, 0xBF18762F, 0x3F41251B, 0xBD835178, 0x3EF64B86, 0x3FAAC472,
    0x3D324201, 0x3FB575FA, 0xBDD951A9, 0xBF951326, 0x3EA82EBD, 0x3FE896CD, 0x3F6916BB, 0xBF7FB15C,
    0xBEB690CB, 0xBE7132FE, 0x3D850F74, 0x3F49F3DA, 0xBE1EFF0D, 0xBF936E10, 0xBF1FC6B4, 0x3CE3237C,
    0xBE20691B, 0xBF73D86B, 0x3E9283BC, 0xBF3A5AE5, 0x3F2CCB31, 0xBEB3C3FF, 0x3DF00A82, 0xBE14441B,
    0x3FF3DAA3, 0xBEE8F25A, 0x3E963AD1, 0x3D510404, 0x3F59FB8B, 0xBEAC7FFF, 0x3FD9AD01, 0x3F98223D,
    0x3EEBA4A0, 0x3F5A3BBC, 0xBEA14EE8, 0x3F6A3A0A, 0xBEFDBC7A, 0xBE36251C, 0x3E71F832, 0xBF564F26,
    0x3F2A1FF6, 0xBE093093, 0x3DB127C8, 0x3F1337CD, 0xBF5C4D61, 0xBEBEB291, 0xBE3BC71A, 0xBF25E304,
    0x3F3280A5, 0x3DBD4023, 0x3F54395C, 0x3F437783, 0x3EB85AD5, 0x3ED41DF8, 0xBE79321F, 0x3F603F88,
    0x3E98A325, 0x3CE5C9E4, 0x3F1B00FE, 0xBDF7A57C, 0x3EAB1A4E, 0x3DED52FC, 0x3F2EA345, 0xBC217930,
    0xBEAFC5CC, 0x3EE1EBD1, 0x3F443C23, 0x3F293445, 0xBE367FB6, 0xBEF9F6D6, 0xBBE44511, 0xBD55AC92,
    0x3F20DAE5, 0xBEEAFDB5, 0xBEAA7B6B, 0xBE4CD4E0, 0xBD92FBA3, 0x3F5E9528, 0xBE2EF655, 0x3F149D76,
    0xBF4D3DE2, 0x3E65DF91, 0x3DAD374B, 0x3F9E8F10, 0x3C5553A9, 0x3D05A704, 0xBD08ED49, 0xBF17EDB9,
    0xBE0038CB, 0x3EFEC967, 0x3E0F8342, 0xBEBA8DA3, 0x3E9E48C3, 0x3EE9FC4D, 0xBF95F0E5, 0x3DEF0E1A,
    0x3F8D2B76, 0x3DFE2EA0, 0x3FACD762, 0x3E966E2E, 0xBEE25C59, 0x3E7AA0FF, 0x3FC60D4A, 0xBE39AFDB,
    0xBE97BBE0, 0x3F1417BF, 0x3E9A288B, 0x3F6A2791, 0x3F18C04D, 0xBF870291, 0xBE04341F, 0xBD8109AA,
    0x3FA44E37, 0xBE514935, 0xBE7B554E, 0xBF42DF65, 0xBE9CC1C6, 0xBF5E8582, 0xBEE61588, 0xBD79ADB6,
    0xBE84C0D9, 0x3EC7C530, 0xBEA85829, 0x3E1E01C4, 0x3E8C194A, 0xBF0F9E6F, 0xBE5DF7FD, 0x3C38D408,
    0x3E13EAC5, 0x3F785E11, 0x3E330B48, 0x3D622EA0, 0xBEF85E17, 0x3EBA3395, 0x3FA23BAC, 0x3EA62A0A,
    0xBDED05EF, 0xBE10E8F3, 0x3E8CD1E6, 0x3D9FC2CA, 0xBEB0DBE0, 0x3CD671A3, 0x3ED9882E, 0xBDF86DA6,
    0xBF378F5E, 0xBE50DC7C, 0x3EA1FD33, 0x3F30744E, 0x3F138202, 0xBF1E9692, 0x3F125905, 0x3F05C27F,
    0x3F631B34, 0x3E6125A0, 0xBDDAC5DD, 0x3E579AAB, 0x3E63ED06, 0x3F6CF468, 0x3E0C1A3E, 0x3F29FA68,
    0xBDCF3C19, 0x3F00190D, 0xBE0B14A0, 0x3F42F2EB, 0x3F39D8DC, 0xBEDF7725, 0xBAD7215A, 0xBE53EB0C,
    0xBDB9FDC9, 0x3E6E58D0, 0x3EC1568C, 0x3EA6A476, 0x3D3417E5, 0x3E022C18, 0xBF32819F, 0x3CA79098,
    0x3F0B3B3D, 0xBDCF5A28, 0x3E99474A, 0xBBE62E11, 0x3E589718, 0x3F044A7F, 0x3EEB1314, 0x3D93F62F,
    0xBBFB23FB, 0xBEBE51CE, 0x3F2C7579, 0x3F47DF72, 0x3F0CDA09, 0x3CE39BFF, 0x3EAF3025, 0x3EE538DD,
    0x3EF2212D, 0xBDE0E1A9, 0x3D513E93, 0xBF0461F6, 0x3F8F1C35, 0x3EA9A453, 0x3EC5E8CA, 0x3E8C7622,
    0x3EF8A169, 0x3EB63942, 0x3DF75A45, 0xBDD94F19, 0xBEFE4F2C, 0x3FBE0DED, 0x3F01FB43, 0xBF440D87,
    0xBF6DD405, 0x3E5E12C1, 0xBEF5A21E, 0x3F013A7F, 0xBE8DF498, 0xBF5B567C, 0x3DB898D8, 0xBEA77928,
    0xBE87FB6B, 0x3FEEC402, 0xBFD03084, 0x3E27D4CC, 0xBF60278E, 0xBEB63A3B, 0xBE94856B, 0x3FD138B9,
    0x3E9BC708, 0xBBD4B335, 0xBF5EC23C, 0xBEB374E0, 0xBEE17597, 0x3FCB1D4B, 0xBEFA37DD, 0xBF91F4AB,
    0xBF10E865, 0x3F67F4B2, 0x3DED42F4, 0x3E86245E, 0xBF0E8EAB, 0xBB7C45DB, 0xBE4B723B, 0xBFC153C5,
    0xBF6BBF46, 0xBFAED494, 0xBDCD7336, 0x3F156B50, 0xBE350AA9, 0x3EEA4FA4, 0xBD8F1768, 0x3FAA75AC,
    0x3F34750F, 0x3E296953, 0x3F253048, 0xBFBA3AE0, 0x3F50E552, 0x3F1EBA72, 0x3FA0CA3D, 0x3F5BA8E6,
    0x3F429853, 0xBE6AB55D, 0x3AE4FC48, 0x3FB8453D, 0xBE0D8E04, 0x3E85AEAB, 0xBEA1BB5A, 0xBE2EE943,
    0xBF967282, 0x3F88E7A3, 0xBED10D69, 0xBE6F433B, 0xBE67F4AC, 0x3EA14DE8, 0x3B7482C8, 0x3E1F273A,
    0xBF07F3FB, 0xBF4F3146, 0x3F1D7EDD, 0x3DB1BC1B, 0x3FB3BB9D, 0x3D83206E, 0x3EBF234E, 0xBE887664,
    0x3FC4BC68, 0x3FBBCB10, 0x3E2054E2, 0xBE9A3256, 0xBEBCEAFD, 0x3E936A2E, 0x3F73F0F4, 0xBEEEA9AC,
    0xBF873A97, 0xBD9FE812, 0xBF234728, 0x3EFD2845, 0xBF147B79, 0xC04910D0, 0x3E5DF0FE, 0xBF5815EA,
    0xBEE280E0, 0xBEAAE32F, 0x3EAB4839, 0x3ECF6816, 0x3E36BCAA, 0xBE18F014, 0xBD928BCE, 0xBEDCAE44,
    0x3F2B7950, 0x3DBDA622, 0x3F9FDB2F, 0xBC06DE61, 0x3EC4ECEC, 0x3E69DD94, 0x3F21EE43, 0x3F2831C2,
    0x3D0C21B5, 0x3DF556A1, 0x3EBDB87D, 0x3F33DD85, 0x3F3F22EB, 0x3EB23D89, 0x3F28B31A, 0x3CBB4D68,
    0x3DFF2742, 0x3E06191C, 0x3F95EBFA, 0x3D5D187F, 0x3E98FC5F, 0x3F189EBC, 0x3EB81C97, 0x401BEBAE,
    0x3F070F2B, 0xBF2023CF, 0xBDA40D9B, 0xBF4050C8, 0x3F63C75B, 0x3DB1C24F, 0xBE78DB45, 0xBF1B0374,
    0xBE63EE11, 0xBF345875, 0x3DB74371, 0x3EA83643, 0xBED36701, 0xBE314932, 0xBC854FC0, 0xBE3AB686,
    0xBF111A40, 0x3E468C49, 0xBF050A28, 0xBE1F4D06, 0x3E5A905A, 0x3F0007D8, 0x3E84E4F2, 0x3D304A30,
    0x3E3D865E, 0x3F04659F, 0x3F63AB78, 0x3EE21193, 0x3F15C87E, 0x3F35BFA3, 0x3EF77D27, 0xBEF8DDDA,
    0xBECB1B8A, 0xBD6593D8, 0x3FBB0EF3, 0x3E77F13D, 0x3D343F3F, 0xBE943EE9, 0xBDA3D9D1, 0x403B7793,
    0x3F13823E, 0xBEF05345, 0xBEE46293, 0xBF67FE77, 0x3F824F2F, 0x3CDD8C06, 0xBF1925C4, 0xBF872E69,
    0xBE8F916C, 0xBF176FF4, 0x3F13D69A, 0xBF255007, 0x3EC1A50A, 0xBF9E3E72, 0x3D537292, 0xBCFAD827,
    0xBF33A081, 0x3E953436, 0x3E8399E6, 0xBE0DCCF0, 0x3F9E28DF, 0xBEA92FBA, 0x3FD4B91E, 0x3F9686B8,
    0x3F24E1C7, 0x3EF7CFB0, 0xBD2655BA, 0x3F8B5490, 0xBF0FA386, 0xBFB05C1A, 0xBF1484CF, 0x3EBE0AD7,
    0xBE698F8F, 0xBE574068, 0xBE2E12F7, 0xBF1C2E79, 0x3F357275, 0xBE812184, 0xBF3C3D2A, 0x3E699366,
    0x3E917DDE, 0x3F37AA50, 0xBE6EC33A, 0xBF00708D, 0xBDECC1A2, 0x3DFD08B6, 0x3F8E3F08, 0x3E969346,
    0xBEE79393, 0xBF2D6240, 0x3DEA5E28, 0xBF95E349, 0x3EDE616E, 0xBF39C0C7, 0xBEFE8427, 0x3F20D791,
    0xBD44636E, 0xBD642E62, 0xBE117AD2, 0xBEB60435, 0x3F2C3F44, 0x3EED0504, 0x3F94D71A, 0x3F6380E4,
    0x3E5BCD21, 0x3F102ECE, 0x3C6C06A8, 0x3F7EFB57, 0xBE70FD9D, 0xBEB12A0D, 0xBF1D6916, 0x3EE7171D,
    0xBEA10ADD, 0xBDF4D372, 0xBD9E81B7, 0xBE6B1404, 0xBE1AF2B3, 0x3EE4BACE, 0x3C68A61B, 0x3E1306D3,
    0xBEB72823, 0x3F7BD26B, 0xBE0031F5, 0xBECC6B0D, 0x3D81F96B, 0x3ECC3B26, 0x3FBADCA5, 0x3E47CB54,
    0x3EF095C9, 0xBDAE170A, 0x3F4CAD8F, 0x3E89EB25, 0xBF1CB326, 0x3E348FDD, 0x3F07D922, 0xBF8AE643,
    0xBEAE0D25, 0x3F61B313, 0x3F341DF6, 0x3ECEB5BA, 0x3F119788, 0xBF232136, 0x3E7E8C4E, 0x3E1A6968,
    0x3F2875A5, 0xBE0AA4EF, 0xBF2C4BF7, 0xBEB66097, 0x3F3EF9A1, 0xBDC3FBC9, 0x3F5DA12D, 0x3CFC1530,
    0xBE934D91, 0x3F41D376, 0x3F02F921, 0xBE956869, 0xBD56A57B, 0x3EA54000, 0x3F176787, 0x3F60AEA9,
    0xBE5533E1, 0xBED68BBA, 0x3E843F2C, 0x3F349785, 0x3E3E7747, 0xBE36C3A0, 0x3E2C9DF4, 0x3E84D8BD,
    0xBE9E8FFD, 0x3F400E06, 0xBD7D08CD, 0xBED6D3C6, 0x3F38D160, 0x3CA9330A, 0xBDB6601C, 0x3F2C451F,
    0x3F3F75B8, 0xC020C142, 0x3D1F28A1, 0xBE9670C9, 0x3D5D13AF, 0x3ECAD2DE, 0x3F054DC1, 0x3E45DC66,
    0x3E808BEB, 0x3E95E7B9, 0x3CD1631D, 0x3F4A8B43, 0x3EBA1A4F, 0x3F4C669E, 0x3D53FC80, 0x3E954BE7,
    0x3F17755B, 0x3F266467, 0x3C35DD41, 0x3EE2367A, 0xBBC4B90F, 0xBF563613, 0x3EA25228, 0xBE28C66B,
    0xBE304E01, 0x3D5A2888, 0x3E0EB05F, 0x3ED196FD, 0x3D825FA1, 0xBCC7D6AE, 0xBF13E68C, 0x3E9BB734,
    0x3E32C786, 0xBEC70630, 0x3F088DED, 0x3E71D9B8, 0x3F0A5F73, 0x3F07DD42, 0xBEED80C7, 0xBF03CDBE,
    0xBF6889E2, 0x3DAFB306, 0x3F8B4D8E, 0xBE91E92D, 0xBD985DC3, 0x3E14DCB1, 0x3F4AE4A7, 0x3FB08726,
    0xBEFAE74C, 0xBF47B95A, 0x3EA758ED, 0x3F17CE72, 0xBC9FD332, 0x3E9982F2, 0xBDC12799, 0x3D286A82,
    0x3D622A96, 0x3E1DB1EC, 0xBDFC7F69, 0x3DE2BB7E, 0x3E51D7C5, 0xBDF5EA93, 0x3D8D768B, 0x3E864C30,
    0x3EA13833, 0x3ED42740, 0x3E2FBD8E, 0x3DEE7DDA, 0x3E19DA75, 0x3DB87FC1, 0x3E8DCF29, 0x3EA70429,
    0x3EF75591, 0x3F42E08B, 0xBFC41085, 0xBE829574, 0xBF1D8877, 0xBE7D65C0, 0xBE70BD74, 0xBF10F932,
    0x3E390D11, 0xC03C5313, 0x3FB957C5, 0x3E9F0899, 0xBE7F6794, 0x3D84164C, 0xBE119300, 0xBDD14ED2,
    0xBE88712E, 0x3E8711FE, 0x3F5FD4AA, 0x3C60F7E0, 0xBF744BFD, 0xBEC73127, 0xBF00FE91, 0xBF331C9D,
    0xBF23EF11, 0xBEDE23F2, 0xBE35122A, 0x3DD4E377, 0x3F463F9A, 0xC02DFD25, 0xBF48C2D4, 0x3EF54FC8,
    0xBF4018A1, 0xBF521702, 0xBF559C6F, 0x3EC426CC, 0x3EBBC9F8, 0xBEB389D6, 0xC0187EA9, 0xBF289ACF,
    0x3F9D3ECD, 0xBEC912E5, 0xBE9D2063, 0xBF270867, 0x3D094B10, 0x3EBBD6E3, 0x3F62DA0B, 0xBFC29541,
    0xBE94DE54, 0x3EC326C6, 0xBF039D74, 0xBEA92ECA, 0xBEFA5786, 0xBE08E11C, 0x3F0A94EC, 0x3E93C1AE,
    0x3D94509F, 0xBEE287A0, 0xBF6C016A, 0xBF0EAEBF, 0xBF127932, 0xBF2FFEA7, 0xBBFAC9CE, 0xC01E25D7,
    0x3F366E98, 0x3F438CFB, 0xBF4942D6, 0x3E5354E9, 0xBF5D34F1, 0xBF28764C, 0xBF56CF68, 0x3E063673,
    0x3EBB5655, 0xC044977E, 0x3F2C7547, 0xBE41F456, 0x3F42FEE9, 0x3E336DB9, 0xBDA7853A, 0x3BAADDE2,
    0xBE01C27C, 0x3D3ADCE6, 0x3EF9411E, 0xC023700B, 0xBDD67258, 0x3F240CC0, 0xBD877CDB, 0xBE7047CB,
    0xBEB9CFF0, 0x3F1F60D0, 0x3F230836, 0x3D640CE5, 0xBF0ADC12, 0xBF30C866, 0x3EC41460, 0xBF4BDB60,
    0xBF599DA5, 0xBF2255A9, 0xBF4487F5, 0x3F203121, 0x3F2BC57C, 0x3F0A2DD5, 0xBF438316, 0xC07E6EDD,
    0xBF0540C7, 0xBF44F748, 0xBEEEDA4E, 0x3ED2085A, 0x3F2FC885, 0xBF7F1302, 0x3F39C341, 0xBF0D4675,
    0xBEDF95B0, 0xBF0520A4, 0xBF0C0B8B, 0xBF1B0CF7, 0x3E6ECA9F, 0xC00B34A8, 0x3F1A0A62, 0x3F17DECA,
    0xBF6BD619, 0x3F631FA0, 0xBEECAA88, 0xBEDDA654, 0xBF197D7C, 0xBE2DC87E, 0x3ECBD1EA, 0xBF64542F,
    0x3EA89679, 0xBF0A98CB, 0x3EA85C81, 0xBF170040, 0xBF147E93, 0xBF12DF56, 0xBD7FAA0E, 0x3F38520F,
    0xC01411E7, 0xBE2C4DF1, 0xBF33F7F3, 0x3F645499, 0xBF511DC2, 0xBF469697, 0xBF054A6C, 0x3C1F77E8,
    0x3F435806, 0xBE06792E, 0x3EE38E7A, 0xBF08BE1B, 0xBF453E90, 0xBF2B2D1D, 0xBF26B6D4, 0xBF1A2AFF,
    0x3CA1E478, 0xBFB490F4, 0xBF27651B, 0x3FC26677, 0xBF1AEBED, 0x3E9FA290, 0xBF0EACD6, 0xBE98EA19,
    0xBF2ABFCE, 0xBFD0EF9E, 0xC042360C, 0x3F95DC7B, 0x3EE1BE26, 0xBF92F291, 0x3EDF60A7, 0xBF61E46F,
    0xBFAFE3AB, 0xBF9B52F8, 0x3DBE2D97, 0xBD9220FF, 0xBFA25EB2, 0x3F1C5FCB, 0xBF245C34, 0x3F6773B3,
    0xBF068D3E, 0xBEC09414, 0xBF3484AC, 0xBE6D4128, 0x3DC4045F, 0x3DB84B29, 0x3EBB071B, 0xBECEF381,
    0x3E957DC8, 0xBED2A6D1, 0x3A0E0F0E, 0xBEAE2E52, 0xBDEBC658
};


void init_ai_agent()
{
  // Layer pointer to perform the connection
  ailayer_t *x;

  #if __AVR__
  // Only on AVR contollers (e.g. Arduino UNO) with weights in PROGMEM

  // Connect the layers to build a model
  model.input_layer = ailayer_input_f32_default(&input_layer);
  x = ailayer_dense_f32_avr_pgm(&dense_layer_1, model.input_layer);
  x = ailayer_relu_f32_default(&relu_layer_1, x);
  x = ailayer_dense_f32_avr_pgm(&dense_layer_2, x);
  x = ailayer_relu_f32_default(&relu_layer_2, x);
  x = ailayer_dense_f32_avr_pgm(&dense_layer_3, x);
  x = ailayer_softmax_f32_default(&softmax_layer, x);
  model.output_layer = x;

  #elif __arm__ && defined USE_CMSIS_ACCELERATION_ON_ARM
  // Only on ARM contollers (e.g. Arduino Nano 33 BLE). AIFES_WITH_CMSIS must be activated in aifes_config.h and CMSIS-DSP library must be available in the AIfES_for_Arduino library.

  // Connect the layers to build a model
  model.input_layer = ailayer_input_f32_default(&input_layer);
  x = ailayer_dense_f32_cmsis(&dense_layer_1, model.input_layer);
  x = ailayer_relu_f32_default(&relu_layer_1, x);
  x = ailayer_dense_f32_cmsis(&dense_layer_2, x);
  x = ailayer_relu_f32_default(&relu_layer_2, x);
  x = ailayer_dense_f32_cmsis(&dense_layer_3, x);
  x = ailayer_softmax_f32_default(&softmax_layer, x);
  model.output_layer = x;

  #else

  // Connect the layers to build a model
  model.input_layer = ailayer_input_f32_default(&input_layer);
  x = ailayer_dense_f32_default(&dense_layer_1, model.input_layer);
  x = ailayer_relu_f32_default(&relu_layer_1, x);
  x = ailayer_dense_f32_default(&dense_layer_2, x);
  x = ailayer_relu_f32_default(&relu_layer_2, x);
  x = ailayer_dense_f32_default(&dense_layer_3, x);
  x = ailayer_softmax_f32_default(&softmax_layer, x);
  model.output_layer = x;

  #endif

  // Finish the model creation by checking the connections and setting some parameters for further processing
  aialgo_compile_model(&model);

  // Distribute the memory to the trainable parameters of the model
  aialgo_distribute_parameter_memory(&model, (void *) model_parameters, parameter_memory_size);

  Serial.print(F("\n-------------- AI agent model structure ---------------\n"));
  aialgo_print_model_structure(&model);
  Serial.print(F("--------------------------------------------------------\n\n"));
  
  Serial.print("The weights need "); Serial.print(parameter_memory_size); Serial.println(" bytes of memory.");

  // Allocate memory for intermediate results of the inference
  uint32_t inference_memory_size = aialgo_sizeof_inference_memory(&model);
  Serial.print("The model needs "); Serial.print(inference_memory_size); Serial.println(" bytes of memory for inference.\n");
  void *inference_memory = malloc(inference_memory_size);

  // Schedule the memory to the model
  aialgo_schedule_inference_memory(&model, inference_memory, inference_memory_size);
}

uint8_t run_ai_agent(float *board)
{
  uint16_t board_shape[2] = {1, 9};
  aitensor_t board_tensor = AITENSOR_2D_F32(board_shape, board);

  aitensor_t *out_tensor = aialgo_forward_model(&model, &board_tensor);
  float *out_data = (float *) out_tensor->data;

  // Calculate the most probable index (argmax)
  float maxi = out_data[0];
  uint8_t argmax = 0;
  for(uint8_t j = 1; j < 9; j++){
    if(out_data[j] > maxi){
        maxi = out_data[j];
        argmax = j;
    }
  }

  return argmax;
}
